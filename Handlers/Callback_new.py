import base64  # –ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64
import uuid  # –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ UUID

from aiogram import Router, types, F, Bot # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

import KeyBord.Keybord as Keybord  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 
import db.db as db  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
import req.req as req  # rest –∑–∞–ø—Ä–æ—Å—ã
from utils.states import new_service  # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π 

sent = False

router = Router()

@router.callback_query(F.data == "New")
async def New_service(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    login = callback.from_user.username
    send_message = (
    f'''üìã@{login}, –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ , –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É.\n\n'''
    f'''‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏–º–µ–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã.''')
    user_uuid = await db.take_userUUID(login)
    if user_uuid != "0":
        ou_uid = await db.take_OUUID(user_uuid)
        office_response = await req.office_request(ou_uid)
        office_data_list = [] 
        for company in office_response["childOUs"]:
            comment_message = company["title"]
            ofiiceuuid = company["UUID"]
            office_data_list.append({"comment_message": comment_message, "ofiiceuuid": ofiiceuuid})
        keyboard = await Keybord.chose_board(office_data_list)
        await bot.send_message(callback.message.chat.id, (send_message), reply_markup=keyboard)
        await state.update_data(office=office_data_list, user_uuid=user_uuid, ou_uid=ou_uid)
    else:
        await bot.send_message(callback.message.chat.id, (send_message), reply_markup=Keybord.unauth_kb)
        ou_uid = "0"
        office_data_list = "0"
        await state.update_data(office=office_data_list, user_uuid=user_uuid, ou_uid=ou_uid)
    await state.set_state(new_service.add_short)

        
        
@router.callback_query(new_service.add_short, F.data.contains("Chose"))
async def add_short(callback: types.CallbackQuery, bot: Bot, state:FSMContext):
    login = callback.from_user.username
    message_send = f"üìù@{login}, –î–ª—è –Ω–∞—á–∞–ª–∞ –∫—Ä–∞—Ç–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —è –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ –∫–∞–∫ —Ç–µ–º—É –∑–∞—è–≤–∫–∏"
    uuid = callback.data.split('_')[1]
    await state.set_state(new_service.add_descr)
    await state.update_data(office=uuid)
    await bot.send_message(callback.message.chat.id,(message_send), reply_markup=Keybord.cancel_kb)
    
    
@router.message(new_service.add_descr)
async def add_descr(message: types.Message, bot: Bot, state:FSMContext):
    login = message.from_user.username
    send_message = (
    f'''üìñ@{login}, –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–Ω–µ—Å–∏—Ç–µ—Å—å —Å–µ—Ä—å–µ–∑–Ω–æ –∫ –æ–ø–∏—Å–∞–Ω–∏—é. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤–∞–º –ø–æ–º–æ–≥—É—Ç.\n\n'''
    f'''‚ÑπÔ∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ) üìù''')

    await state.update_data(short=message.text)
    await state.set_state(new_service.add_critical)
    await bot.send_message(message.chat.id,(send_message), reply_markup=Keybord.cancel_kb)

@router.message(new_service.add_critical)
async def add_critical(message: types.Message, bot: Bot, state: FSMContext):
    global sent
    login = message.from_user.username
    send_message = (
        f'''üì©@{login}, –ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏.\n\n'''
        f'''‚ÑπÔ∏è SLA –ø–æ —Ç–∏–ø–∞–º –∑–∞—è–≤–æ–∫:\n'''
        f'''–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂ ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö\n'''
        f'''–ü—Ä–æ—á–µ–µ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Å 8:00 –¥–æ 20:00 (–ú–°–ö)'''
    )
    if message.photo:
        photo_info = message.photo[-1]
        unique_filename = str(uuid.uuid4()) + ".jpg"
        photo = await bot.download(photo_info, destination=f"template/{unique_filename}")
        with open(f"template/{unique_filename}", "rb") as image_file:
            image_data = image_file.read()
        base64_image = base64.b64encode(image_data).decode("utf-8")
        await state.update_data(image=base64_image)
        await state.update_data(descr=message.caption)
        await state.set_state(new_service.add_request)
        if sent == False:
            sent = True
            await state.set_state(new_service.add_request)
            await bot.send_message(message.chat.id, send_message, reply_markup=Keybord.critical_kb)
    else:
        await state.update_data(descr=message.text)
        await state.set_state(new_service.add_request)
        await bot.send_message(message.chat.id, send_message, reply_markup=Keybord.critical_kb)
    
    
    
@router.callback_query(new_service.add_request)
async def add_service(callback: types.CallbackQuery, bot: Bot, state:FSMContext):
    login = callback.from_user.username
    number = await db.find_number(login)
    message_send = f"‚úÖ@{login}, –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
    if callback.data == "Critical":
        critical = "agreement$2352101"
    else:
        critical = "agreement$605301"
    data = await state.get_data()  
    result = await req.send_service_to_api(short=data["short"], descr= data["descr"], critical = critical , ou_uid=data["ou_uid"], user_uuid=data["user_uuid"], office=data["office"], number = number, login = login,  image=data.get("image"))
    if result == True:
        if data["user_uuid"] == "0":
            await bot.send_message(callback.message.chat.id,(message_send), reply_markup=Keybord.main_kb)
        else:
            key = await db.key(login)
            if key == 0:
                await bot.send_message(callback.message.chat.id,(message_send), reply_markup=Keybord.main_kb_key)
            else:
                await bot.send_message(callback.message.chat.id,(message_send), reply_markup=Keybord.main_kb)     
        await state.clear()