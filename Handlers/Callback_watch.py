import base64  # –ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64
import re  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
import uuid  # –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ UUID

from aiogram import Router, types, F, Bot # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup  # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è Telegram API

from bs4 import BeautifulSoup  # –ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∏ XML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

import KeyBord.Keybord as Keybord  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 
import db.db as db  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
import req.req as req  # rest –∑–∞–ø—Ä–æ—Å—ã
from utils.states import add_comment  # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π 


sent = False

router = Router()





@router.callback_query(F.data == "Watch")
async def Watch(callback: types.CallbackQuery, bot: Bot,  state: FSMContext):
    global user_uuid
    login = callback.from_user.username
    auth = await db.auth(login)
    if auth == 1:
        await un_Watch(callback, bot,state)
    else:
        user_uuid = await db.take_userUUID(login)
        requests = await req.view_requests(user_uuid)
        if requests:
            for request in requests:
                            unauth = False
                            uuid = request.get('UUID', 'N/A') 
                            number = request.get('number', 'N/A')
                            shortDescr = request.get('shortDescr', 'N/A')
                            descriptionRTF = request.get('descriptionRTF', 'N/A')
                            responsible = request.get('responsible', {})
                            state_service = request.get('state', {})
                            if state_service == "registered":
                                state_message = "üî¥–ù–æ–≤–∞—è"
                            elif state_service == "waitClientAnswer":
                                state_message = "üü°–í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                            elif state_service == "deferred":
                                state_message = "üîµ–û—Ç–ª–æ–∂–µ–Ω–∞"
                            else:
                                state_message = "üü¢–í —Ä–∞–±–æ—Ç–µ"
                            if responsible is not None:
                                responsible_title = responsible.get('title', 'N/A')
                            else:
                                responsible_title = '–ï—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                            if descriptionRTF is not None:
                                soup = BeautifulSoup(descriptionRTF, 'html.parser')
                                description_text = soup.get_text()
                            else:
                                description_text = " "
                            output_message = f"üìå–ó–∞—è–≤–∫–∞ ‚Ññ{number}\n" \
                                            f"{state_message}\n" \
                                            f"üìù–¢–µ–º–∞: {shortDescr}\n" \
                                            f"üìñ–û–ø–∏—Å–∞–Ω–∏–µ: {description_text}\n" \
                                            f"üë®‚Äçüíª–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_title}\n\n"\
                                            f"‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –Ω—É–∂–Ω–æ –∑–∞—è–≤–∫–æ–π, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                                            
                            request_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{uuid}_{number}",),
                                                                            InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",callback_data=f"watch_comment_{uuid}_{unauth}_{number}")]]
                                                        )
                            await bot.send_message(callback.message.chat.id,(output_message), reply_markup=request_kb)
                            await state.update_data(user_uuid=user_uuid)
        else:
            output_message = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ "
            await bot.send_message(callback.message.chat.id,(output_message), reply_markup=Keybord.main_kb)


@router.callback_query(F.data == "Watch_unauth")
async def un_Watch(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    login = callback.from_user.username
    requests = await db.find_tasks_by_login(login)
    print(requests)
    found_requests = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–∞—è–≤–∫–∏
    for item in requests:
        item = item[0]
        info = await req.find_task(item)
        if info:
            found_requests = True  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–∞—è–≤–∫–∏
            unauth = True
            number = info[0]['number']
            shortDescr = info[0]['shortDescr']
            descriptionRTF = info[0]['descriptionRTF']
            responsible_title = info[0]['responsible']['title']
            uuid = info[0]['UUID']
            state_service = info[0]['state']
            if state_service == "registered":
                state_message = "üî¥–ù–æ–≤–∞—è"
            elif state_service == "waitClientAnswer":
                state_message = "üü°–í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"
            elif state_service == "deferred":
                state_message = "üîµ–û—Ç–ª–æ–∂–µ–Ω–∞"
            else:
                state_message = "üü¢–í —Ä–∞–±–æ—Ç–µ"
            if descriptionRTF is not None:
                soup = BeautifulSoup(descriptionRTF, 'html.parser')
                description_text = soup.get_text()
            output_message = f"üìå–ó–∞—è–≤–∫–∞ ‚Ññ{number}\n" \
                             f"{state_message}\n" \
                             f"üìù–¢–µ–º–∞: {shortDescr}\n" \
                             f"üìñ–û–ø–∏—Å–∞–Ω–∏–µ:{description_text}\n" \
                             f"üë®‚Äçüíª–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_title}\n\n"\
                             f"‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –Ω—É–∂–Ω–æ –∑–∞—è–≤–∫–æ–π, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            request_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{uuid}_{number}"),
                 InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
                                      callback_data=f"watch_comment_{uuid}_{unauth}_{number}")]]
            )
            await state.update_data(user_uuid="0")
            await bot.send_message(callback.message.chat.id, output_message, reply_markup=request_kb)
    if not found_requests:
        output_message = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ "
        await bot.send_message(callback.message.chat.id, output_message, reply_markup=Keybord.main_kb)





@router.callback_query(F.data.contains("watch_comment"))
async def Watch_comment(callback: types.CallbackQuery, bot: Bot, state:FSMContext):
    uuid = callback.data.split('_')[2]
    unauth = callback.data.split('_')[3]
    number = callback.data.split('_')[4]
    comments = await req.view_comment(uuid)
    if not comments:
        message = f"üòí –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞—è–≤–∫–µ {number}"
        await bot.send_message(callback.message.chat.id,(message), reply_markup=Keybord.main_kb)
    else:
        service_message = f"üñ• –ö–æ–º–º–µ–Ω–∞—Ç—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–∏ {number}"
        await bot.send_message(callback.message.chat.id,(service_message))
    for comment in comments:
        author = comment.get("author", None)
        private = comment.get("private")
        if private == False:
            if author is not None:
                author_title = author.get("title", "–ê–≤—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
                author_id = author.get("UUID")
                if not unauth and author_id == user_uuid:
                    author_emoji = "üë®‚Äçüíª"
                else:
                    author_emoji = "‚öôÔ∏è"
            else:
                author_title = "–ê–≤—Ç–æ—Ä"
                author_emoji = "üòè" 

            text = comment.get("text", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            soup = BeautifulSoup(text, 'html.parser')
            comment_text = soup.get_text()
            file_match = re.search(r'file\$([\d]+)', text)
            if file_match:
                file_uuid = file_match.group(1)
                download = await req.download_photo(file_uuid)
                if download:
                    comment_message = f"{author_emoji}{author_title}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}\n"
                    photo = FSInputFile(f"template/{file_uuid}.jpg")
                    await bot.send_photo(callback.message.chat.id,photo=photo, caption=comment_message)
                else:
                    await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
            else:
                comment_message = f"{author_emoji}{author_title}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}\n"
                await bot.send_message(callback.message.chat.id, comment_message)


    

@router.callback_query(F.data.contains("add_comment"))
async def handler_comment(callback: types.CallbackQuery, bot: Bot, state:FSMContext):
    global sent
    sent = False
    uuid = callback.data.split('_')[2]
    number = callback.data.split('_')[3]
    await state.update_data(uuid=uuid)
    comment_message = f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ {number} , —è –ø–µ—Ä–µ–¥–∞–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º "
    await state.set_state(add_comment.progress)
    await bot.send_message(callback.message.chat.id, (comment_message), reply_markup=Keybord.cancel_kb)
    
@router.message(add_comment.progress)
async def handle_add_comment(message: types.Message, bot: Bot, state: FSMContext):
    login = message.from_user.username
    key = await db.key(login)
    global sent
    if message.photo:
        unique_filename = str(uuid.uuid4()) + ".jpg"
        photo_info = message.photo[-1]
        photo = await bot.download(photo_info, destination=f"template/{unique_filename}")
        with open(f"template/{unique_filename}", "rb") as image_file:
            image_data = image_file.read()
        base64_image = base64.b64encode(image_data).decode("utf-8")
        await state.update_data(image=base64_image)
        await state.update_data(comment=message.caption)
    else:
        await state.update_data(comment=message.text)
    data = await state.get_data()
    user = data["user_uuid"]
    result = await req.send_comment_to_api(
        uuid=data["uuid"],
        user_uuid=data["user_uuid"],
        user_comment=data["comment"],
        image=data.get("image")
    )
    if result == False:
        message_send = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        sent = False
    else:
        message_send = f"üëå@{login}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω"
        if sent == False:
            if user != "0":
                if key == 0:
                    await bot.send_message(message.chat.id,(message_send), reply_markup=Keybord.main_kb_key)
                else:
                    await bot.send_message(message.chat.id, message_send, reply_markup=Keybord.main_kb)
                    sent = True
            else:
                await bot.send_message(message.chat.id, message_send, reply_markup=Keybord.main_kb_unauth)
                sent = True
            await state.clear()
        
        
@router.callback_query(F.data == "Watch_all")
async def Watch_all(callback: types.CallbackQuery, bot: Bot,  state: FSMContext):
    login = callback.from_user.username
    user_uuid = await db.take_userUUID(login)
    ou_uid = await db.take_OUUID(user_uuid)
    task = await req.take_task()
    found_request = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    for request in task:
        uuid = request.get('UUID', 'N/A')
        number = request.get('number', 'N/A')
        shortDescr = request.get('shortDescr', 'N/A')
        descriptionRTF = request.get('descriptionRTF', 'N/A')
        responsible = request.get('responsible', {})
        if responsible is not None:
            responsible_title = responsible.get('title', 'N/A')
        else:
            responsible_title = '–ï—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        if descriptionRTF is not None:
            soup = BeautifulSoup(descriptionRTF, 'html.parser')
            description_text = soup.get_text()
        else:
            description_text = " "
        clientOU = request.get('clientOU', {})
        try:
            clientOU_UUID = clientOU.get('UUID', 'N/A')
        except:
            clientOU_UUID = None
        if ou_uid == clientOU_UUID:
            found_request = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞—è–≤–∫–∞
            unauth = False
            output_message = f"üìû–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {number}\n" \
                             f"üìù–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: {shortDescr}\n" \
                             f"üìñ–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: {description_text}\n" \
                             f"ü™ì–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_title}"
            request_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{uuid}_{number}",),
                                                                InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",callback_data=f"watch_comment_{uuid}_{unauth}_{number}")]]
                                            )
            await bot.send_message(callback.message.chat.id,(output_message), reply_markup=request_kb)
            await state.update_data(user_uuid = user_uuid)
    if not found_request:
        output_message = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ "
        await bot.send_message(callback.message.chat.id,(output_message), reply_markup=Keybord.main_kb)